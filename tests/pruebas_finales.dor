
# IO BASICO : por default solo hay printInt, printFloat, printString

printFloatLn x = do
  printFloat x
  printString "\n"

printIntLn x = do
  printInt x
  printString "\n"

printStringLn x = do
  printString x
  printString "\n"

# printBool no esta definida por default
printBool x = 
  printString (if x "True" "False")

printBoolLn x = do
  printBool x
  printString "\n"

assert condition message =
  if condition
     ()
     error message

# FUNCIONES BASICAS
id x = x

flip f x y = f y x

# composicion funcional izquierda y derecha
(f <: g) x = f (g x)
(g :> f) x = f (g x)

# aplicacion funcional de baja prioridad 
infixr (<|) 105
f <| x = f x

infixl (|>) 105
x |> f = f x

# TIPOS PREDEFINIDOS

# tupla simple. en el futuro el lenguaje las tendra builtin
data Tuple a b = (a, b)

# tipo opcional: valores "null"
data Option a = None | Some a

# si el valor es nulo, en su lugar retornar otro
infixl (??) 90
a ?? b = match a
  None    => b
  Some x  => x

# listas encadenadas
infixr (;) 95
data List a = Nil | a; (List a)

# FUNCIONES EN LISTAS

empty l =
  match l
    Nil => True
    _   => False

head l =
  match l
    Nil   => error "Tried to extract head from empty list"
    x; _  => x

tail l =
  match l
    Nil   => error "Tried to extract tail from empty list"
    _; xs => xs

listLength l =
  match l
    Nil   => 0
    _; xs => 1 + listLength xs


# reducciones izquierda y derecha
foldr f v l =
  match l
    Nil   => v
    x; xs => f x (foldr f v xs)

foldl f v l =
  match l
    Nil   => v
    x; xs => foldl f (f v x) xs

# mappear sobre cada elemento
map f = foldr ((;) <: f) Nil

# ejecutar una accion sobre cada elemento en orden
# (no es funcional, no regresa datos

forEach : a => (a -> Void) -> List a -> Void
forEach action list = do
  var it = list
  
  while (not (empty it))
    action (head it)
    it := tail it

  ()


reverse = foldl (flip (;)) Nil
# como cerrar un zipper: applica f sobre elementos correspondientes 
zip2 f l r =
  match (l, r)
    (Nil, _) =>
      Nil
    (_, Nil) =>
      Nil
    (lx; lxs, rx; rxs) =>
      f lx rx; zip2 f lxs rxs

# para una lista de floats, el promedio:
average xs = foldr (+.) 0.0 xs /. intToFloat (listLength xs)

# llama una funcion void n veces, recoge los resultados en una lista
times proc n =
  if (n == 0)
    Nil
    proc(); times proc (n - 1)

# ARBOL BINARIO DE BUSQUEDA CON LLAVES ENTERAS
data BST k v = Vacio | Nodo k v (BST k v) (BST k v)

# operacion no destructiva! crea un arbol nuevo
insert a k v = match a
  Vacio => Nodo k v Vacio Vacio
  Nodo k1 v1 l r =>
    cond
      k > k1 => Nodo k1 v1 l (insert r k v)
      k < k1 => Nodo k1 v1 (insert l k v) r
      else   => Nodo k1 v l r

find a k = match a
  Vacio => None
  Nodo k1 v1 l r =>
    cond
      k > k1 => find r k
      k < k1 => find l k
      else   => Some v1

makeBST l = match l
  Nil          => Vacio
  (k, v); xs => insert (makeBST xs) k v 

# MATES
fac n = 
  if (n == 0) 
    1
    n * fac (n - 1)

facCiclo n = do
  var res = 1
  
  while (n > 0)
    res := res * n
    n   := n - 1

  res

fib n =
  cond
    n == 0 => 0
    n == 1 => 1
    else   => fib (n - 1) + fib (n - 2)

fibCiclo n = do
  var a = 0
  var b = 1
  var i = 0

  while (i < n)
    var tmp = b
    b := a + b
    a := tmp
    i := i + 1

  a

# exponenciacion entera

x ** n =
  cond
    n < 0   => if (x == 1) 1 0
    n == 0  => 1
    n == 1  => x
    else    =>
      if (n % 2 == 0)
        # even
        (x * x) ** (n / 2)
        # odd
        x *((x * x) ** ((n - 1) / 2))

# Matrix pow(Matrix m, int exp) {
# 	if(!exp) return identity(m.size());
# 	if(exp == 1) return m;
# 	Matrix result = identity(m.size());
# 	while(exp) {
# 		if(exp & 1) result = multiply(result, m);
# 		m = multiply(m, m);
# 		exp >>= 1;
# 	}
# 	return result;
# }

# ARREGLOS

findSeq array value = do
  var i = 0
  var position = -1

  while (position < 0 && i < arrayLength array)
    position := if (array@i == value) i -1
    i := i + 1

  if(position >= 0)
    Some position
  # else
    None

# operaciones destructivas (in-place), no funcionales
swap arr i j = do
  tmp    = arr@i
  arr@i := arr@j
  arr@j := tmp
  ()

# http://en.wikipedia.org/wiki/Quicksort

# partition : Array Int -> Int -> Int -> Int
_partition array left right = do
  pivot_idx = (left + right) / 2
  pivot = array@pivot_idx
  swap array pivot_idx right
  var store_idx = left
  var i = left
  while (i < right)
    cond 
      array@i < pivot => do
        swap array i store_idx
        store_idx := store_idx + 1
        ()
      else => ()
    i := i + 1
  swap array store_idx right
  store_idx

_quickSort array i k = do
  cond
    i < k => do
      p = _partition array i k
      _quickSort array i (p - 1)
      _quickSort array (p + 1) k
    else => ()

quickSort array = _quickSort array 0 (arrayLength array - 1) 

# MATRICES

shallowCopy array = do
  len = arrayLength array
  if (len == 0)
    array # don't copy an empty array!
    do # else
      new_array = Array (arrayLength array) array@0
      
      var i = 0
      while (i < len)
        new_array@i := array@i
        i := i + 1

      new_array

Matrix m n v = do
  inner = (Array n v)
  var mat = Array m inner

  var i = 0
  while (i < m)
    mat@i := shallowCopy inner
    i := i + 1

  mat

rows = arrayLength
columns m =
  if (rows m == 0)
    0
    arrayLength m@0

printMat mat = do
  m = rows mat
  n = columns mat
  var i = 0
  var j = 0
  while (i < m)
    j := 0
    while (j < n) 
      printFloat mat@i@j
      printString " "
      j := j + 1
    printString "\n"
    i := i + 1

matrixMult a b = do
  assert (columns a == rows b) "Matrix dimension mismatch"
  n = columns a
  ra = rows a
  cb = columns b

  res = Matrix ra cb 0.0

  var i = 0
  while (i < ra)
    var j = 0
    while (j < cb)
      var k = 0
      while (k < n)
        res@i@j := res@i@j +. (a@i@k *. b@k@j)
        k := k + 1
      j := j + 1
    i := i + 1

  res


# quicksort(A, i, k):
#   if i < k:
#     p := partition(A, i, k)
#     quicksort(A, i, p - 1)
#     quicksort(A, p + 1, k)

# partition(array, left, right)
#      pivotIndex := choosePivot(array, left, right)
#      pivotValue := array[pivotIndex]
#      swap array[pivotIndex] and array[right]
#      storeIndex := left
#      for i from left to right - 1
#          if array[i] < pivotValue
#              swap array[i] and array[storeIndex]
#              storeIndex := storeIndex + 1
#      swap array[storeIndex] and array[right]  // Move pivot to its final place
#      return storeIndex

# TRUCOS DE TIPOS

# un contenedor heterogeneo de datos imprimibles!
# notese que el tipo a no sale en la parte izquierda
# (NO es un parametro del tipo)
data Printable = a => Printable a (a -> Void)

PS string = Printable string printString
PI int = Printable int printInt
PB bool = Printable bool printBool
PF float = Printable float printFloat

print thing = match thing
  Printable value printer => printer value

printLn thing = do
  print thing
  printString "\n"


main () = do
  var n = 0
  var m = 0

  var i = 0
  var j = 0
  var arr = Array 0 0

  

  
  printStringLn "Factorial Recursivo------------------"
  printString   " input: "
  n := readInt ()
  printString   "output: "
  printIntLn (fac n)

  printStringLn "Factorial Iterativo------------------"
  printString   " input: "
  n := readInt ()
  printString   "output: "
  printIntLn (facCiclo n)

  printStringLn "Fionacci  Recursivo------------------"
  printString   " input: "
  n := readInt ()
  printString   "output: "
  printIntLn (fib n)

  printStringLn "Fibonacci Iterativo------------------"
  printString   " input: "
  n := readInt ()
  printString   "output: "
  printIntLn (fibCiclo n)
  
  var x = 0
  
  printStringLn "Exponenciacion entera----------------"
  printString   " input      (base): "
  x := readInt ()
  printString   " input (exponente): "
  n := readInt ()
  printString   "           output : "
  printIntLn (x ** n)

  printStringLn "Find secuencial y sort de enteros----"
  printString   " input (longitud del arreglo): "
  n := readInt ()
  printString   " input  (valores del arreglo): "
  i := 0
  arr := Array n 0
  while (i < n)
    arr@i := readInt()
    i := i + 1
  
  printString   " input      (valor a buscar): "
  n := readInt ()
  printString   "output (posicion en arreglo): "
  match (findSeq arr n)
    None   => printStringLn "No se encuentra"
    Some x => printIntLn    x

  quickSort arr
  printString   "output     (arreglo ordenado): "
  i := 0
  while (i < arrayLength arr)
    printInt arr@i
    printString " "
    i := i + 1
  printStringLn " "

    

  

  printStringLn "Promedio de una lista de floats-------"
  printString   " input (longitud del arreglo): "
  n := readInt ()
  printString   " input  (valores del arreglo): "
  fs = times readFloat n

  printString " output: "
  printFloatLn <| average fs 

  printStringLn "Multiplica matrices-------------------"
  printString   " input    (filas): "
  m := readInt ()
  printString   " input (columnas): "
  n := readInt ()

  mat = Matrix m n 0.0
  i := 0
  while (i < m)
    j := 0
    while (j < n) 
      mat@i@j := readFloat()
      j := j + 1
    i := i + 1

  printString   " input2   (filas): "
  m := readInt ()
  printString   " input2(columnas): "
  n := readInt ()

  mat2 = Matrix m n 0.0
  i := 0
  while (i < m)
    j := 0
    while (j < n) 
      mat2@i@j := readFloat()
      j := j + 1
    i := i + 1

  printStringLn "-----"
  printMat mat
  printStringLn " X "
  printMat mat2
  printStringLn " = "
  printMat <| matrixMult mat mat2
  
  printStringLn "Arbol binario de busqueda------------"
  
  lt = ((5, "montse"); (2, "bob"); (7, "jack"); (6, "gino"); (8, "salvador"); Nil)
  tree = makeBST lt
  
  printStringLn "buscando valores 7, 5, 17: "
  printStringLn (find tree 7 ?? "No se encuentra")
  printStringLn (find tree 5 ?? "No se encuentra")
  printStringLn (find tree 17 ?? "No se encuentra")

  l1 = 1; 2; 3; Nil
  l2 = 1_000_000; 20; 30; Nil

  printStringLn "Suma dos listas----------------------"
  zip2 (+) l1 l2 |> reverse |> map printIntLn

  printStringLn "OR de dos listas---------------------" 
  mayor_igual_30 = x -> x >= 30
  zip2 (||) (map mayor_igual_30 l1) (map mayor_igual_30 l2) |> reverse |> map printBoolLn 


  printStringLn "Impresion de lista heterogenea-------" 
  forEach print <| PS "Hola tengo "; PI 89; PS " anios "; Nil

  ()

