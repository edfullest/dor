
# Checks de tipos

# los operadores predefinidos:

# (*) : Int -> Int -> Int
# (/) : Int -> Int -> Int
# (%) : Int -> Int -> Int
# (+) : Int -> Int -> Int
# (-) : Int -> Int -> Int

# (<) : Int -> Int -> Bool
# (>) : Int -> Int -> Bool
# (<=) : Int -> Int -> Bool
# (>=) : Int -> Int -> Bool
# (==) : Int -> Int -> Bool
# (!=) : Int -> Int -> Bool

# definir un nuevo operador infijo
infixl (<++++>) 45


# cada ejemplo es precedido por un comentario con el tipo que el compilador debe inferir

# String
Myglobal = "Hello"

# Int -> Int -> Bool
x <++++> y = x + y == 7

# tipo parametrico: "para todo t0, id es una funcion de t0 a t0"
# t0 => t0 -> t0
id x = x

# t0 t1 => t0 -> t1 -> t0
first a b = a

# Int -> Int
fac n = 
  if (n == 0) 
    1
    n * fac (n - 1)

# composicion funcional
# t0 t1 t2 => (t0 -> t1) -> (t2 -> t0) -> (t2 -> t1)
(f <: g) x = f (g x)
(g :> f) x = f (g x)

# aplicacion funcional de baja prioridad
infixr (<|) 100
f <| x = f x

# forward-declaration:
# es necesario declarar f antes de definir mifuncion, porque son 
# mutuamente recursivas. Este lenguaje no permite deduccion de tipos 
# sobre 2 globales al mismo tiempo (por ahora...)

f : Int -> Int
mifuncion a = 3 + f a - 7
f i = 4 * i - mifuncion i

# Checks de scoping

# nota: por ahora los 9 operadores basicos estan definidos como externs

# (n m) son parametros de mifunc.
# x es una variable local
# se crea un lambda que captura (x m n) de su contexto y las mete en su
# 'closure', y se aplica al valor 8 y eso se devuelve como resultado

mifunc n = m -> do
  var x = n < 5
  (y -> if x (m + n) y) 8

# nota: lo siguiente aun no funciona, lamentablemente aun no se que hacer
# cuando el usuario ya dio un tipo cuantificado...

# si se comenta la siguiente linea, la deduccion fallara para nf
nf : a => a -> Int
nf x = nf "helo" + nf True + nf 1

fib n =
  cond
    n == 0 => 1
    n == 1 => 1
    else   => fib (n - 1) + fib (n - 2)
    


# type List t = Nil | t :: (List a)
# type Option t = None | Some t
type Ty = m => m Int -> Int

infixr (::) 95

data Person = Person String Int
data List a = Nil | a :: (List a)

juan = Person "Hola" 6
vacia = Nil
unodos = 1 :: 2 :: Nil

data ContInt c = Cont (c Int)

x = Cont unodos

data Any = x => Any x

yy = Any 6
zz = Any "hello"
