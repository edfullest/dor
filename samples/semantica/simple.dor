
# builtins are not real funcs. wrap them!
fplus a b = a +. b
fdiv a b = a /. b

putFloat x = printFloat x
putInt x = printInt x
putString x = printString x

putFloatLn x = do
  printFloat x
  printString "\n"

putIntLn x = do
  printInt x
  printString "\n"

putStringLn x = do
  printString x
  printString "\n"

getFloat () = readFloat ()
getInt () = readInt ()
getString () = readString ()

id x = x

flip f x y = f y x

(f <: g) x = f (g x)
(g :> f) x = f (g x)

infixr (<|) 105
f <| x = f x


fac n = 
  if (n == 0) 
    1
    n * fac (n - 1)

fib n =
  cond
    n == 0 => 1
    n == 1 => 1
    else   => fib (n - 1) + fib (n - 2)
    
infixr (::) 95
data List a = Nil | a :: (List a)
data Option a = None | Some a

foldr f v l =
  match l
    Nil     => v
    x :: xs => f x (foldr f v xs)

foldl f v l =
  match l
    Nil     => v
    x :: xs => foldl f (f v x) xs

map f = foldr ((::) <: f) Nil

reverse = foldl (flip (::)) Nil

empty l = match l
  Nil => True
  _ => False

length l =
  match l
    Nil     => 0
    _ :: xs => 1 + length xs

even x = x % 2 == 0
lista = 1 :: 2 :: 3 :: 4 :: Nil
lista_e = map even lista


average xs = foldr fplus 0.0 xs /. intToFloat (length xs)

readNFloats n =
  if (n == 0)
    Nil
    getFloat () :: readNFloats (n - 1)

putFloats = map putFloatLn

main () = do
  printString "Dame n floats\n"
  
  fs = map (fplus 5.0) <| readNFloats <| getInt()

  printString " me diste; \n"
  putFloats fs

  printString " promedio: "
  putFloatLn <| average fs 
  ()

 




# zip2 f l r =
#   match (l, r)
#     (Nil, _) =>
#       Nil
#     (_, Nil) =>
#       Nil
#     (lx :: lxs, rx :: rxs) =>
#       f lx rx :: zip f lxs rxs
# 
# cprod = zip2 (,)
# dot =

