
printFloatLn x = do
  printFloat x
  printString "\n"

printIntLn x = do
  printInt x
  printString "\n"

printStringLn x = do
  printString x
  printString "\n"

printBool x = 
  printString (if x "True" "False")

printBoolLn x = do
  printBool x
  printString "\n"

id x = x

flip f x y = f y x

(f <: g) x = f (g x)
(g :> f) x = f (g x)

infixr (<|) 105
f <| x = f x

infixl (|>) 105
x |> f = f x


fac n = 
  if (n == 0) 
    1
    n * fac (n - 1)

fib n =
  cond
    n == 0 => 1
    n == 1 => 1
    else   => fib (n - 1) + fib (n - 2)

data Option a = None | Some a

infixl (??) 90

a ?? b = match a
  None    => b
  Some x  => x


infixr (;) 95
data List a = Nil | a; (List a)

foldr f v l =
  match l
    Nil     => v
    x; xs => f x (foldr f v xs)

foldl f v l =
  match l
    Nil     => v
    x; xs => foldl f (f v x) xs

map f = foldr ((;) <: f) Nil

reverse = foldl (flip (;)) Nil

empty l = match l
  Nil => True
  _ => False

length l =
  match l
    Nil     => 0
    _; xs => 1 + length xs

average xs = foldr (+.) 0.0 xs /. intToFloat (length xs)

readNFloats n =
  if (n == 0)
    Nil
    readFloat (); readNFloats (n - 1)

printFloats = map printFloatLn



data BST k v = Vacio | Nodo k v (BST k v) (BST k v)

insert a k v = match a
  Vacio => Nodo k v Vacio Vacio
  Nodo k1 v1 l r =>
    cond
      k > k1 => Nodo k1 v1 l (insert r k v)
      k < k1 => Nodo k1 v1 (insert l k v) r
      else   => Nodo k1 v l r

data Tuple a b = (a, b)

makeBST l = match l
  Nil          => Vacio
  (k, v); xs => insert (makeBST xs) k v 

find a k = match a
  Vacio => None
  Nodo k1 v1 l r =>
    cond
      k > k1 => find r k
      k < k1 => find l k
      else   => Some v1

zip2 f l r =
  match (l, r)
    (Nil, _) =>
      Nil
    (_, Nil) =>
      Nil
    (lx; lxs, rx; rxs) =>
      f lx rx; zip2 f lxs rxs

and = (&&)

getTrue () = do
  printStringLn "get true"
  True

getFalse () = do
  printStringLn "get false"
  False

main () = do
  printString "Dame n floats\n"
  
  fs = readNFloats <| readInt()

  printString " me diste; \n"
  printFloats fs

  printString " promedio: "
  printFloatLn <| average fs 
  
  printStringLn "making tree "
  
  lt = ((5, "montse"); (2, "bob"); (7, "jack"); (6, "gino"); (8, "salvador"); Nil)
  tree = makeBST lt

  printStringLn (find tree 7 ?? "No se encuentra")
  printStringLn (find tree 5 ?? "No se encuentra")
  printStringLn (find tree 17 ?? "No se encuentra")

  l1 = 1; 2; 3; Nil
  l2 = 1_000_000; 20; 30; Nil

  printStringLn "suma ints"
  zip2 (+) l1 l2 |> map printIntLn

  printStringLn "operacion booleana" 
  mayor_igual_30 = x -> x >= 30
  zip2 (||) (map mayor_igual_30 l1) (map mayor_igual_30 l2) |> map printBoolLn 

  if (not (getTrue () && getTrue () && getTrue () && getTrue ()))
    printStringLn "It is true!"
    printStringLn "It is false!"

  printStringLn "Fin"

  numeros = Array 5 99

  var i = 0

  while (i < size numeros)
    numeros@i := 10 + i
    i := i + 1

  printIntLn numeros@3

  ()

